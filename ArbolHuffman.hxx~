//Arbol binario ord.hxx

#ifndef ArbolHuffman_HXX_INCLUDED
#define ArbolHuffman_HXX_INCLUDED

using namespace std;


ArbolHuffman::ArbolHuffman()
{

}

ArbolHuffman::ArbolHuffman(T val)
{
    raiz = new NodoHuffman(val);
}

ArbolHuffman::~ArbolHuffman()
{

}

bool ArbolHuffman::esVacio()
{
    if(raiz == NULL)
        return true;
    return false;
}

NodoHuffman* ArbolHuffman::obtenerRaiz()
{
    return raiz;
}

void ArbolHuffman::fijarRaiz(NodoHuffman* nraiz)
{
    raiz = nraiz;
}


T ArbolHuffman::obtenerDatoRaiz()
{
    return raiz->getDato();
}

template<class T>
bool ArbolHuffman::insertar(T _dato)
{
    if(raiz->insertarNodo(_dato))
        return true;
    else
        return false;
}


bool ArbolHuffman::eliminar(T n)
{
    if(raiz == NULL)
        return false;
    else
    {
        raiz->eliminarNodo(n);
    }
}



bool ArbolHuffman::buscar(T& n)
{
    if(raiz == NULL)
        return false;
    else
        return raiz->buscar(n);

}


int ArbolHuffman::altura()
{
    return alturaM(raiz) - 1;
}


int ArbolHuffman::alturaM(NodoHuffman* nodo)
{
    if (nodo == NULL)
    {
        return 0;
    }

    int izq = alturaM(nodo->getIzquierda());
    int der = alturaM(nodo->getDerecha());

    if (izq > der)
        return 1 + izq;
    else
        return 1 + der;
}

/*
int ArbolHuffman::tamano(NodoHuffman* inicio)
{
    int cont = 0;
    if(inicio == NULL)
    {
        return 0;
    }
    else
    {
        cont++;
        return cont + tamano(inicio->getIzquierda()) + tamano(inicio->getDerecha());
    }
}*/


void ArbolHuffman::inOrden(NodoHuffman* inicio)
{
    if(inicio == NULL)
        return;
    else
    {
        inOrden(inicio->getIzquierda());
        cout << inicio->getDato() << " ";
        inOrden(inicio->getDerecha());
    }
}


void ArbolHuffman::preOrden(NodoHuffman* inicio)
{
    if(inicio == NULL)
    {
        return;
    }
    else
    {
        cout << inicio->getDato() << " ";
        preOrden(inicio->getIzquierda());
        preOrden(inicio->getDerecha());
    }
}

void ArbolHuffman::posOrden(NodoHuffman* inicio)
{
    if(inicio == NULL)
        return;
    else
    {
        posOrden(inicio->getIzquierda());
        posOrden(inicio->getDerecha());
        cout << inicio->getDato() << " ";
    }
}


void ArbolHuffman::nivelOrden(NodoHuffman* inicio)
{
    queue< NodoHuffman* > cola;
    cola.push(inicio);
    while(!cola.empty())
    {
        cout << cola.front()->getDato() << " ";
        if(cola.front()->getIzquierda() != NULL)
            cola.push(cola.front()->getIzquierda());
        if(cola.front()->getDerecha() != NULL)
            cola.push(cola.front()->getDerecha());

        cola.pop();
    }
}

#endif // ARBOLBINARIO_HXX_INCLUDED

